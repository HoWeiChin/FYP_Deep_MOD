import matplotlib.pyplot as plt
import numpy as np
import os
import pathlib
import re
import argparse

def get_total_time(data_folder) :
    """
        data_folder (str): folder which stores metadata and data of a simulated trial
        return total_time (str): total simulation time, a string, in seconds
    """
    file_name  = ""
    #loop over data folder to find .txt file which contains Ttotal
    print("data_folder", data_folder)
    for file in os.listdir(data_folder):
        #find all matching files with .txt at the back
        if re.findall("^\w+_simulation_values.txt$", file):
            print("file", file)
            file_name = file
            break
    print("file_name", file_name)
    text_file = open(os.path.join(data_folder,file_name), "r")
    lines = text_file.readlines()
    target_line = ""
    #for loop searches for line with Ttotal
    for line in lines:
        if "Ttotal" in line:
            target_line = line
            break
    #target_line looks something like:'Total_sim_time(Ttotal):10\n'
    #so we need to get 10 without the \n
    total_time = target_line.split(":")[0]
    total_time = total_time.split("\n")[0] #\n removed, we have '10' now
    return total_time

#plot_util function to return plots of data generated by numer method and analy method on the same diagram
#for comparison purposes

def plot_util(data_dir, save_dir) :

    """
        data_dir (str): directory which contains a list of folders which store simulated data for different trials
        save_dir (str): directory to save your plots, save_dir should not be a subfolder of data_dir

    """
    pathlib.Path(save_dir).mkdir(parents=True,exist_ok=True)
    for sub_data_dir in os.listdir(data_dir):
        final_save_dir = os.path.join(save_dir, sub_data_dir + "_plot")
        #create new folder to save plot for the ith trial
        pathlib.Path(final_save_dir).mkdir(parents=True,exist_ok=True)
        xx = "x_analy.npy"
        yy = "y_analy.npy"
        u = "u_numer.npy"
        #cd into curr folder, we want to Total simulation time for text file for each trial folder
        curr_trial_folder = os.path.join(data_dir,sub_data_dir)
        #print("curr_trial_folder", curr_trial_folder)
        total_time = get_total_time(curr_trial_folder)
        time_label = "t=" + total_time #time_label is the label for data generated by numerical method

        fig = plt.figure()
        xx_loaded = np.load(os.path.join(curr_trial_folder,xx))
        yy_loaded = np.load(os.path.join(curr_trial_folder,yy))
        u_loaded = np.load(os.path.join(curr_trial_folder,u))
        last_row = len(u_loaded) - 1 #last row is the final conc of bicoid when total simulation time is reached
        #plot data generated by analytical solution
        plt.plot(xx_loaded, yy_loaded, color="k", linewidth=4, label="Analytical")
        #plot data generated by analytical solution
        plt.plot(xx_loaded, u_loaded[last_row, :], '--', linewidth=2, label=time_label)
        plt.xlabel('x')
        plt.ylabel('u')
        plt.legend()
        #save plot as .jpg file with ith_trial as a prefix string
        file_name = os.path.join(final_save_dir, sub_data_dir+"_plot.jpg")
        print(final_save_dir)
        print(file_name)
        fig.savefig(file_name)


#plot contour function
#to generate a heat map of bicoid concentration given x and t


def plot_contour(
                x_npy, t_npy, u_npy, 
                file_name="plot.png", subset=None):
    
    """
        x_npy (str): .npy file for spatial data generated by numerical method
        t_npy (str): .npy file for time data generated by numerical method
        u_npy (str): .npy file for bicoid concentration data generated by numerical method
        file_name (str): a file name of plot with .png extension at the end, default value is "plot.png"
        subset (int): a subset row values which a user wants to obtain
        
    """
    spatial_data_x = np.load(x_npy)
    time_data_y = np.load(t_npy)
    conc_data   = np.load(u_npy)
    plt.contourf(spatial_data_x[subset:-1,:], time_data_y[subset:-1,:], conc_data[subset:-1,:])
    plt.colorbar()
    plt.savefig(file_name)

if __name__ == "__main__":
    # data_dir = "C://Users//Wei Chin//Desktop//FYP_proj//data//"
    # save_dir = "C:/Users/Wei Chin/Desktop/FYP_proj/plot"
    # plot_util(data_dir, save_dir)
    my_parser = argparse.ArgumentParser(description="plot and compare numerical and analytical methods")
    my_parser.add_argument("-data_dir", type=str, help="directory which subfolders have all the simulated data")
    my_parser.add_argument("-save_dir", type=str, help="directory to save plot")
    args = my_parser.parse_args()
    plot_util(args.data_dir, args.save_dir)


