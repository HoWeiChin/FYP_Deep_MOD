class NeuralNet:
    def __init__(self, config, training_options, output_options):
        self.config = config
        self.training_options = training_options
        self.output_options = output_options
        
        self.u = ['1', 'u', 'uË†2']
        self.du = ['1', 'u_{x}', 'u_{xx}', 'u_{xxx}']
        self.coeffs_list = library_matrix_mat(self.u, self.du)
        self.library_config = {'total_terms': len(self.coeffs_list), 'deriv_order': 3, 'poly_order': 2}
    
    def train_model(self, X_train, Y_train):
        
        """
            X_train (np array): training data in numpy format
            Y_train (np array): ground truth (your Y labels) in numpy format
        
        """
        sparse_vectors, denoised = DeepMoD(
            X_train, Y_train, self.config, library_1D, 
            self.library_config, self.training_options, 
            self.output_options)
        
        return sparse_vectors, denoised
    
    def print_result(self, sparse_vectors):
        print_PDE(sparse_vectors[0], self.coeffs_list, PDE_term="u_t")
    
    def compare_results(self,original_data, ground_truth, inferred_data):
        
        """
            original_data (np array): original training data generated by the pde
            ground_truth (np array): original bicoid concentration generated by the pde
            inferred_data (np array): bicoid concentration generated by DeepMoD
            
            function will save plots
        
        """
        data_dict = {'x_grid': original_data[:, 0], 't_grid': original_data[:, 1], 
                     'ground truth': ground_truth, 'inferred': inferred_data}
        for key in data_dict:
            data_dict[key] = np.squeeze(data_dict[key])  # pandas doesn't like higher dimensional arrays
        df = pd.DataFrame(data_dict)
        
        fig, axes = plt.subplots(ncols=2, figsize=(20, 4))
        
        #original image
        im_o = axes[0].contourf(df.pivot(index='t_grid', columns='x_grid', values='ground truth'), cmap='coolwarm')
        axes[0].set_xlabel('x')
        axes[0].set_ylabel('t')
        axes[0].set_title('Ground truth')
        
        #reconstructed image
        im_recon = axes[1].contourf(df.pivot(index='t_grid', columns='x_grid', values='inferred'), cmap='coolwarm')
        axes[1].set_xlabel('x')
        axes[1].set_title('Reconstructed')
        fig.colorbar(im_recon, ax=axes.ravel().tolist())
        plt.show()
        plt.savefig("compare_ori_inferred.png")